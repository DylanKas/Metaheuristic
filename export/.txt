    public List<DeliveryRoute> tabuSearch(final int tabuLength, final int maximumIteration) {
        List<DeliveryRoute> bestSolution = deliveryRoutes;
        double latestTotalLength = getTotalLength();
        double bestLength = latestTotalLength;
        Queue<List<DeliveryRoute>> tabuList = new LinkedList<>();

        List<List<DeliveryRoute>> neighbors;
        for(int i=0;i<maximumIteration;i++){
            System.out.println("A");
            neighbors = generateNeighbors();
            System.out.println("B");
            List<DeliveryRoute> min = neighbors.stream()
                    .filter(route -> !tabuList.contains(route))
                    .min( (solution1, solution2) -> (int) (getRoutesTotalLength(solution1) - getRoutesTotalLength(solution2)))
                    .get();
            double newRouteLength = getRoutesTotalLength(min);
            if(newRouteLength > latestTotalLength){
                if(tabuList.size() == tabuLength){
                    tabuList.remove();
                }
                tabuList.add(min);
            }
            latestTotalLength = newRouteLength;
            if(newRouteLength < bestLength){
                bestLength = newRouteLength;
                bestSolution = min;
            }
            deliveryRoutes = min;
        }
        deliveryRoutes = bestSolution;
        return bestSolution;
    }